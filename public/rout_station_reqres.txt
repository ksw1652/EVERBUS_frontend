USE globus_v1;
######################################################################
##	SERVICENAME : ROUTESEARCH										##
##	DESC ; 지역코드 검색 후, 노선명으로 해당 노선을 검색한다.
##		REQ : CITYCD, ROUTENM										##
##		RES : ROUTEID, ROUTENM, ROUTESUBN, STSTOP, EDSTOP 			##
######################################################################
DESC ROUTES;

SELECT R.citycd, R.rid, R.routeid, R.routenm, R.routesubnm
	 , ST.STOPNM AS ststopnm
     , ED.STOPNM AS edstopnm
  FROM ROUTES R
 INNER JOIN STOPS ST  ON R.CITYCD = ST.CITYCD AND R.STSTOPSID = ST.SID
 INNER JOIN STOPS ED  ON R.CITYCD = ED.CITYCD AND R.EDSTOPSID = ED.SID
 WHERE R.CITYCD = 101
   AND R.ROUTENM LIKE '%1%';

######################################################################
##	SERVICENAME : ROUTESEARCHDETAIL									##
##	DESC : 	ROUTESEARCH_SEVICE의 결과를 이용해 							##
##			노선이동 경로, 환승지 ID와 같은 노선의 상세정보를 리턴한다.			##
##	REQ :	CITYCD, RID												##
##	RES :															##
##		 															##
## 실시간 정보 요청에 의해 변동적인 값을 줄 수 있는 쿼리가 존재해야한다.			##
######################################################################

DESC ROUTEVIASTOP;

SELECT RVS.citycd, RVS.seq
	 , R.rid,R.routeid, R.routenm, R.routedesc, R.trnsid
	 , S.sid, S.stopid, S.stopnm
  FROM ROUTEVIASTOP RVS
 INNER JOIN ROUTES R
	ON RVS.CITYCD = R.CITYCD AND RVS.RID = R.RID
 INNER JOIN STOPS S
	ON RVS.CITYCD = S.CITYCD AND RVS.SID = S.SID
 WHERE RVS.CITYCD = 405 AND RVS.RID = 2;

######################################################################
##	SERVICENAME : STATIONSEARCH										##
##	DESC : 	지역코드 선택 후, 지역의 해당 정류장을 검색 						##
##																	##
##	REQ :	CITYCD, STOPNM											##
##	RES :															##
##		 															##
######################################################################
DESC STOPS;

SELECT citycd, sid, stopnm, stopid, arsid
  FROM STOPS
 WHERE citycd = 101
   AND stopnm like '가%';


######################################################################
##	SERVICENAME : STATIONDETAILSEARCH								##
##	DESC : 	해당 정류장을 지나는 노선 목록을 제공한다. 						##
##																	##
##	REQ :	CITYCD, SID												##
##	RES :															##
##		 															##
######################################################################

SHOW TABLES;

DESC ROUTEVIASTOP;
SELECT distinct RVS.citycd, RVS.seq
	 , R.rid, R.routeid, R.routedesc, R.routenm, R.routesubnm
	 , RVS.sid, S.stopid, S.stopnm, S.arsid, S.stopdesc
  FROM ROUTEVIASTOP RVS
 INNER JOIN ROUTES R
	ON RVS.CITYCD = R.CITYCD AND RVS.RID = R.RID
 INNER JOIN STOPS S
	ON RVS.CITYCD = S.CITYCD AND RVS.SID = S.SID
 WHERE RVS.CITYCD = 101 AND RVS.SID = 1;



######################################################################
##	SERVICENAME : SEARCHPATH										##
##	DESC: 	출발지 도착지의 좌표를 받아 해당 좌표의 근처 정류장으로부터 			##
##			가는 경로를 탐색한다											##
##	REQ :	SX, SY, EX, EY											##
##	RES :															##
##		 															##
######################################################################


SHOW DATABASES;

use globus_kr;

SHOW TABLES;

SELECT * FROM KR_ROUTELOADINFO GROUP BY CITYCD;




routeSearch
post method
routeNm
cityObject (array 형식 or json 형식 모두 가능)

/routeDetail
post method
rid
cityEnNm
cityCode

/stationSearch
post method
stationNm
cityObject

/stationDetail
post method
sid
cityEnNm
cityCode

/*
 #####################################################################
 ##	SERVICENAME : PLACE SEARCH       								##
 ##	DESC : 	해당 정류장을 지나는 노선 목록을 제공한다. 						##
 ##																	##
 ##	REQ :	SX, SY, EX, EY  								        ##
 ##	RES :	sid, fstopid, fstopnm, fstopdesc, frid, frouteid        ##
 ##         froutenm , trnsid, trnstopid, trnstopnm, trnstopdesc    ##
 ##         erid AS trrid, erouteid AS trrouteid ,                  ##
 ##         eroutenm AS trroutenm , estopid, estopnm, estopdesc     ##
 ##         erid, erouteid, eroutenm                                ##
 ##                                                                 ##
 ##		 															##
 #####################################################################
 */
